import torch
import numpy as np
def getThermalTemplates(dx, dy):
  def K00():
    t2 = 1.0/dx
    t3 = (dy*t2)/3.0
    t4 = (dy*t2)/6.0
    t5 = -t3
    t6 = -t4
    K00 = torch.tensor([t3,t5,t6,t4, t5,t3,t4,t6,\
                    t6,t4,t3,t5, t4,t6,t5,t3]).view((4,4)).float()
    return K00
  def K11():
    t2 = 1.0/dy;
    t3 = (dx*t2)/3.0
    t4 = (dx*t2)/6.0
    t5 = -t3
    t6 = -t4
    K11 = torch.tensor([t3,t4,t6,t5, t4,t3,t5,t6,\
                    t6,t5,t3,t4, t5,t6,t4,t3]).view((4,4)).float()
    return K11

  def K01():
    K01 = torch.tensor([1.0/2.0, 0.0, -1.0/2.0, 0.0,\
                    0.0, -1.0/2.0, 0.0, 1.0/2.0,\
                    -1.0/2.0, 0.0, 1.0/2.0, 0.0,\
                    0.0, 1.0/2.0, 0.0, -1.0/2.0]).view((4,4)).float()
    return K01
  
  return {'00':K00(), '11':K11(), '01':K01()}
#--------------------------------------------------#
def getStructuralTemplates(dx, dy):
  #-----------------------#
  def Knn_00(dx,dy):
    t2 = 1.0/dx;
    t3 = dy*t2*(1.0/3.0);
    t4 = dy*t2*(1.0/6.0);
    Knn_00 = np.reshape(np.array([t3,0,-t3,0,-t4,0,t4,0,0,0,0,0,0,0,0,0\
                                  ,-t3,0,t3,0,t4,0,-t4,0,0,0,0,0,0,0,0,0,\
                                  dy*t2*(-1.0/6.0),0,t4,0,t3,0,-t3,0,0,0,\
                                  0,0,0,0,0,0,t4,0,-t4,0,-t3,0,t3,0,0,0,0,\
                                  0,0,0,0,0]),(8,8));
    return torch.tensor(Knn_00).float()
#-----------------------#
  def Knn_11(dx,dy):
    t2 = 1.0/dy;
    t3 = dx*t2*(1.0/6.0);
    t4 = dx*t2*(1.0/3.0);
    Knn_11 = np.reshape([0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t4,0.0,\
                        t3,0.0,-t3,0.0,-t4,0.0,0.0,0.0,0.0,0.0,0.0,\
                        0.0,0.0,0.0,t3,0.0,t4,0.0,-t4,0.0,-t3,0.0,0.0,\
                        0.0,0.0,0.0,0.0,0.0,0.0,0.0,-t3,0.0,-t4,0.0,t4,\
                        0.0,t3,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,-t4,\
                        0.0,-t3,0.0,t3,0.0,t4],(8,8));
    return torch.tensor(Knn_11).float()
#-----------------------#
  def Knn_22(dx,dy):
    t2 = 1.0/dy;
    t3 = dx*t2*(1.0/6.0);
    t4 = dx*t2*(1.0/3.0);
    t5 = 1.0/dx;
    t6 = dy*t5*(1.0/3.0);
    t7 = dy*t5*(1.0/6.0);
    Knn_22 = np.reshape(np.array([t4,1.0/4.0,t3,-1.0/4.0,-t3,-1.0/4.0, -t4,\
                                  1.0/4.0,1.0/4.0,t6,1.0/4.0,-t6,-1.0/4.0,\
                                  -t7,-1.0/4.0,t7,t3,1.0/4.0,t4,-1.0/4.0,-t4,\
                                  -1.0/4.0,-t3,1.0/4.0,-1.0/4.0,-t6,-1.0/4.0,\
                                  t6,1.0/4.0,t7,1.0/4.0,-t7,-t3,-1.0/4.0,-t4,\
                                  1.0/4.0,t4,1.0/4.0,t3,-1.0/4.0,-1.0/4.0,\
                                  dy*t5*(-1.0/6.0),-1.0/4.0,t7,1.0/4.0,t6,\
                                  1.0/4.0,-t6,-t4,-1.0/4.0,-t3,1.0/4.0,t3,\
                                  1.0/4.0,t4,-1.0/4.0,1.0/4.0,t7,1.0/4.0,-t7,\
                                  -1.0/4.0,-t6,-1.0/4.0,t6]),(8,8));
    return torch.tensor(Knn_22).float()
#-----------------------#
  def Knn_01(dx,dy):
    Knn_01 = np.reshape([0.0,1.0/4.0,0.0,1.0/4.0,0.0,-1.0/4.0,0.0,\
                        -1.0/4.0,1.0/4.0,0.0,-1.0/4.0,0.0,-1.0/4.0,\
                        0.0,1.0/4.0,0.0,0.0,-1.0/4.0,0.0,-1.0/4.0,0.0,\
                        1.0/4.0,0.0,1.0/4.0,1.0/4.0,0.0,-1.0/4.0,0.0,\
                        -1.0/4.0,0.0,1.0/4.0,0.0,0.0,-1.0/4.0,0.0,-1.0/4.0,\
                        0.0,1.0/4.0,0.0,1.0/4.0,-1.0/4.0,0.0,1.0/4.0,0.0,\
                        1.0/4.0,0.0,-1.0/4.0,0.0,0.0,1.0/4.0,0.0,1.0/4.0,0.0,\
                        -1.0/4.0,0.0,-1.0/4.0,-1.0/4.0,0.0,1.0/4.0,0.0,1.0/4.0,\
                        0.0,-1.0/4.0,0.0],(8,8));
    return torch.tensor(Knn_01).float()
#-----------------------#
  def Knn_02(dx,dy):
    t2 = 1.0/dx;
    t3 = dy*t2*(1.0/3.0);
    t4 = dy*t2*(1.0/6.0);
    Knn_02 = np.reshape([1.0/2.0,t3,0.0,-t3,-1.0/2.0,-t4,0.0,t4,t3,0.0,\
                        -t3,0.0,-t4,0.0,t4,0.0,0.0,-t3,-1.0/2.0,t3,0.0,t4,\
                        1.0/2.0,-t4,-t3,0.0,t3,0.0,t4,0.0,-t4,0.0,-1.0/2.0,\
                        -t4,0.0,t4,1.0/2.0,t3,0.0,-t3,dy*t2*(-1.0/6.0),0.0,t4,\
                        0.0,t3,0.0,-t3,0.0,0.0,t4,1.0/2.0,-t4,0.0,-t3,-1.0/2.0,\
                        t3,t4,0.0,-t4,0.0,-t3,0.0,t3,0.0],(8,8));
    return torch.tensor(Knn_02).float()
#-----------------------#
  def Knn_12(dx,dy):
    t2 = 1.0/dy;
    t3 = dx*t2*(1.0/6.0);
    t4 = dx*t2*(1.0/3.0);
    Knn_12 = np.reshape([0.0,t4,0.0,t3,0.0,-t3,0.0,-t4,t4,1.0/2.0,t3,0.0,-t3,\
                        -1.0/2.0,-t4,0.0,0.0,t3,0.0,t4,0.0,-t4,0.0,-t3,t3,\
                        0.0,t4,-1.0/2.0,-t4,0.0,-t3,1.0/2.0,0.0,-t3,0.0,-t4,\
                        0.0,t4,0.0,t3,-t3,-1.0/2.0,-t4,0.0,t4,1.0/2.0,t3,0.0,\
                        0.0,-t4,0.0,-t3,0.0,t3,0.0,t4,-t4,0.0,-t3,1.0/2.0,t3,\
                        0.0,t4,-1.0/2.0],(8,8));
    return torch.tensor(Knn_12).float()
                          
  K_templates = {'00': Knn_00(dx, dy), '11': Knn_11(dx, dy),\
                 '22': Knn_22(dx, dy), '01': Knn_01(dx, dy),\
                 '02': Knn_02(dx, dy), '12': Knn_12(dx, dy)}
  return K_templates

